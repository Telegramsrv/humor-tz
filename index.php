<?php
/**
 * Created by PhpStorm.
 * User: lexi
 * Date: 30.01.18
 * Time: 21:26
 ***********************
 * @interpreter php7.1
 * @dependencies sqlite3
 *--------------------------------------------------------------------------------------------------------------
 * Симуляция кормлеения экзотических рыб в не менее экзотическом аквариуме волшебными (особого сорта) орехами
 *--------------------------------------------------------------------------------------------------------------
 *
 * Для понятности и занятности текст скрипта изложен на ломанном русском языке. :)
 *
 * Mysql заменил на SQLite3 по причине того что его устанавливать не надо (на компе не стоит) но реализация запросов
 * примерно такая же и для конкретного тестового задания вполне подходит.
 *
 * Для того чтобы симулировать аквариум нужно выполнить действия:
 * 1. Запустить PHP в режиме сервера из папки проекта
 *     php -S 0.0.0.0:8000
 *
 * 2. По умолчанию симуляция проводится с 20 орешками и 3-я классам рыб. Каждой по классу.
 * чтобы запустить симуляцию нужно перейти по адресу http://localhost:8000
 *
 * 3. Для изменения условий симуляции в строку адреса следует включить параметры
 * nuts (int)               - число орешков
 * fishes (о|к|щ)           - количество и классы рыб.
 *         о - БанкоОсётр
 *         к - ЗаймоКарп
 *         щ - КредитоЩука
 * к примеру:
 *  http://localhost:8000/?nuts=10&fishes=ккощ
 *  запуск симуляции с 10 орешками, 2-я карпами, осетром и щукой
 *
 * p.s. Не пугайтесь коду на русском. Задание с юмором, ответ тоже решил сделать с юмором.
 */
/**
 * @var Аквариум $аквариум
 *
 */
spl_autoload_register(function ($class_name) {
    include "./classes/{$class_name}.php";
});
/*если захочется расширить количество видов рыб, нужно:
1. Создать потомка класса "Рыба"
2. Установить индивидуальные свойства
3. Описать индивидуальные процессы, если есть в методах (может рыбка слишком прожорлива и сытость от орешка прибавляет по 1)
4. Добавить ссылку на новый класс в массив ниже
 */
$классыРыбки = [
    'о' => БанкоОсётр::class,
    'к' => ЗаймоКарп::class,
    'щ' => КредитоЩука::class
];
/*Читабельные классы рыбок*/
$читабельныеКлассыРыбки = [
    БанкоОсётр::class => 'Банко-осётр',
    ЗаймоКарп::class => 'Займо-карп',
    КредитоЩука::class => 'Кредито-щука'
];

/*нескучные имена рыб, чтобы отличать рыб одного класса*/
$names = [
    'Орни', 'Хохлик', 'Лулу', 'Вимба', 'Анри', 'Дамир', 'Титаник', 'Адольф', 'Элдорис', 'Дворецкий',
    'Зубастик', 'Чиди', 'Динар', 'Читах', 'Адриан', 'Латвий', 'Кариера', 'Кери', 'Джинка', 'Адара'];

$осталосьОрешков = 20;

$sql = new \SQLite3('./log.db3');
$sql->query("BEGIN TRANSACTION;")->finalize();
$sql->query("CREATE TABLE IF NOT EXISTS log
    (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        sess VARCHAR(10),
        text TEXT
    );")->finalize();
$sql->query("CREATE UNIQUE INDEX IF NOT EXISTS autoindex_log ON log (id);")->finalize();
$sql->query("COMMIT")->finalize();

$preparedQuery = $sql->prepare("INSERT INTO log (sess, text) VALUES (:sess, :text)");

/** Логгер оформлен в синглтон. Это позволяет на его использовать из любого места*/
$log = Log::getInstance();
/** Запись в базу оформил как замыкание. коллбек вызывается всякий раз, как происходит запись в лог $data[sess=>string,text=>string]; */
$log->onWrite = function ($data) use ($preparedQuery) {
    $preparedQuery->bindValue(':sess', $data['sess'], SQLITE3_TEXT);
    $preparedQuery->bindValue(':text', $data['text'], SQLITE3_TEXT);
    $preparedQuery->execute()->finalize();
};

$осталосьОрешков = isset($_GET['nuts']) ? intval($_GET['nuts']) : $осталосьОрешков;

$аквариум = new Аквариум();
foreach (preg_split('//u', isset($_GET['fishes']) ? $_GET['fishes'] : "окщ") as $literal) {
    if (!empty($literal) && stristr(implode('', array_keys($классыРыбки)), $literal) !== false) {
        $классРыбки = $классыРыбки[$literal];
        $аквариум->запуститьРыбку(
            $классРыбки, "{$читабельныеКлассыРыбки[$классРыбки]} ({$names[mt_rand(0,19)]})"
        );
    }
}

while ($аквариум->рыбкиХотятКушать() && $осталосьОрешков > 0) {
    $аквариум->датьОрешек(new Орешек());
    Log::console('Появляется орешек.')->step();
    $рыбкаУспевшаяПервой = $аквариум->рыбкиУстремилисьЗаОрешком();
    Log::console("{$рыбкаУспевшаяПервой->имя} первой подплыла к орешку.")->step();
    while ($рыбкаУспевшаяПервой->неГотоваСкушатьОрешек($аквариум->орешек)) {
        $рыбкаУспевшаяПервой->созерцаетОрешек();
        Log::console("{$рыбкаУспевшаяПервой->имя} наслаждается видом орешка.")->step();
    }
    $рыбкаУспевшаяПервой->скушалаОрешек($аквариум->орешек);
    Log::console("{$рыбкаУспевшаяПервой->имя} съедает орешек. Сытность становится {$рыбкаУспевшаяПервой->текущаяСытость()}.");
    $осталосьОрешков--;
    $аквариум->перечислитьНеСкушавшихОрешек();
}

if ($аквариум->рыбкиХотятКушать())
    echo "Орешки кончились, рыбки еще голодные";
else if ($осталосьОрешков > 0)
    echo "Рыбки больше кушать не желают. Осталось орешков {$осталосьОрешков}";
else
    echo "Рыбки скушали все орешки и все наелись";

$sql->close();